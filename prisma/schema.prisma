datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  passwordHash String
  image         String?
  phoneNumber   String?
  address       String?
  addresses Address[]
  role          String @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Billboard{
  id String @id @default(cuid())
  title String
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Category{
  id String @id @default(cuid())
  name String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  products Product[]
}

  model Size{
    id String @id @default(cuid())
    name String
    value String
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
    products ProductSize[]
  }

model Product{
  id String @id @default(cuid())
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  name String
  detail String
  price Decimal
  stock Int
  type String
  sizes ProductSize[]
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images Image[]
  orderItems OrderItem[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([categoryId])
}

model ProductSize{
  id  String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId], references: [id])
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId]) // Ensure a product-size combination is unique
  @@index([productId])
  @@index([sizeId])
}

model Image{
  id String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId],references: [id], onDelete: Cascade)
  url String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([productId])
}

model Address{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  province String
  addressDetail String
  note String?
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

model Order{
  id String @id @default(cuid())
  orderItems OrderItem[]
  addressId String
  address Address @relation(fields: [addressId], references: [id])
  status String @default("Pending")
  isPaid Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([addressId])
}

model OrderItem{
  id String @id @default(cuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int

  @@index([productId])
  @@index([orderId])
}